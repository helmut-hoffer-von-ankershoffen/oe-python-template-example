{
  "openapi": "3.1.0",
  "info": {
    "title": "OE Python Template Example",
    "termsOfService": "https://oe-python-template-example.readthedocs.io/en/latest/",
    "contact": {
      "name": "Helmut Hoffer von Ankershoffen",
      "url": "https://github.com/helmut-hoffer-von-ankershoffen",
      "email": "helmuthva@gmail.com"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "Observability"
        ],
        "summary": "Health",
        "description": "Check the health of the service.\n\nThis endpoint returns the health status of the service.\nThe health status can be either UP or DOWN.\nIf the service is healthy, the status will be UP.\nIf the service is unhealthy, the status will be DOWN and a reason will be provided.\nThe response will have a 200 OK status code if the service is healthy,\nand a 500 Internal Server Error status code if the service is unhealthy.\n\nReturns:\n    Health: The health status of the service.",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "tags": [
          "Observability"
        ],
        "summary": "Health",
        "description": "Check the health of the service.\n\nThis endpoint returns the health status of the service.\nThe health status can be either UP or DOWN.\nIf the service is healthy, the status will be UP.\nIf the service is unhealthy, the status will be DOWN and a reason will be provided.\nThe response will have a 200 OK status code if the service is healthy,\nand a 500 Internal Server Error status code if the service is unhealthy.\n\nReturns:\n    Health: The health status of the service.",
        "operationId": "health_healthz_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          }
        }
      }
    },
    "/hello-world": {
      "get": {
        "tags": [
          "Basics"
        ],
        "summary": "Hello World",
        "description": "Return a hello world message.\n\nReturns:\n    _HelloWorldResponse: A response containing the hello world message.",
        "operationId": "hello_world_hello_world_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_HelloWorldResponse"
                }
              }
            }
          }
        }
      }
    },
    "/echo/{text}": {
      "get": {
        "tags": [
          "Basics"
        ],
        "summary": "Echo",
        "description": "Echo back the provided text.\n\nArgs:\n    text (str): The text to echo.\n\nReturns:\n    Echo: The echo.\n\nRaises:\n    422 Unprocessable Entity: If text is not provided or empty.",
        "operationId": "echo_echo__text__get",
        "parameters": [
          {
            "name": "text",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Text"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Echo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Echo": {
        "properties": {
          "text": {
            "type": "string",
            "minLength": 1,
            "title": "Text",
            "description": "The echo",
            "examples": [
              "HELLO, WORLD!"
            ]
          }
        },
        "type": "object",
        "required": [
          "text"
        ],
        "title": "Echo",
        "description": "Response model for echo endpoint."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Health": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/HealthStatus"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "Health",
        "description": "Health status model."
      },
      "HealthStatus": {
        "type": "string",
        "enum": [
          "UP",
          "DOWN"
        ],
        "title": "HealthStatus",
        "description": "Health status enumeration."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "_HelloWorldResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "The hello world message",
            "examples": [
              "Hello, world!"
            ]
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "_HelloWorldResponse",
        "description": "Response model for hello-world endpoint."
      }
    }
  }
}
